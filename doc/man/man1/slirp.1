.\" This manpage has been automatically generated by docbook2man 
.\" from a DocBook document.  This tool can be found at:
.\" <http://shell.ipoline.com/~elmert/comp/docbook2X/> 
.\" Please send any bug reports, improvements, comments, patches, 
.\" etc. to Steve Cheng <steve@ggi-project.org>.
.TH "SLIRP" "1" "03 March 2010" "" ""

.SH NAME
slirp \- C code generator for the S\[hy]Lang scripting language
.SH SYNOPSIS

\fBslirp\fR [ \fBOPTIONS\fR\fI ...\fR ] \fBheaderfile\fR [ \fBheaderfile\fR\fI ...\fR ]

.SH "DESCRIPTION"
.PP
SLIRP is the (SL)ang (I)nterface (P)ackage, a code generator aimed
primarily at simplifying the process of creating modules for the S\[hy]Lang
scripting language.
.PP
SLIRP can dramatically reduce the time and effort required to make
C, C++, or Fortran code callable directly from the S\[hy]Lang interpreter,
generate Makefiles to automate the build process, and even parallelize
wrappers with OpenMP to take advantage of multiprocessors.
.PP
SLIRP may also be used to generate pure C bindings for C++ code, or
empty (stub) implementations for the interface(s) specified by its input
header files. The code generated in these cases has no dependencies upon
S\[hy]Lang whatsoever.
.SH "OPTIONS"
.TP
\fB\-c++\fR
Mandate that input headers be interpreted as C++, which can
be helpful to coerce the interpretation of files
that either lack a .hh suffix or do not contain class
definitions or other explicit C++ syntax.
.TP
\fB\-cfront\fR
Generate standalone C wrappers (.cc and .h files),
instead of S-Lang bindings, for C++ interface
.TP
\fB\-const_strings\fR
Treat 'char*' return values as 'const char*'
.TP
\fB\-d\fR
Include slirp_debug_pause() debugging stub within module
.TP
\fB\-fortran_strlen <i>\fR
Indicate where hidden string len args are placed in
wrappers of Fortran calls accepting CHARACTER args
(0 = append length args to end of arg list [default]
1 = insert length args directly after CHARACTER arg)
.TP
\fB\-g[=integer]\fR
Emit debugging output to terminal, of varying verbosity
.TP
\fB\-fprefix <pref>\fR
Emit code only for functions which begin with an
exact match to <pref>, instead of default regexp
.TP
\fB\-h \-help \-\-help\fR
This message
.TP
\fB\-ignore <option>\fR
Tune the emission of ignored symbol messages: use 'notrunc'
to append to existing ignored symbol list (default: the
ignored symbol list is truncated at startup), or specify an
alternate output file name (default: ./ignored.txt)
.TP
\fB\-I  <dir>\fR
Add <dir> to search path for headers during code
generation; will also be reflected in \-make output
.TP
\fB\-L  <dir>\fR
Add <dir> to search path at link time; for \-make
.TP
\fB\-l  <lib>\fR
Add <lib> to library list at link time; for \-make
.TP
\fB\-ldflags <flags>\fR
Use when \-L or \-l are inappropriate; for \-make
.TP
\fB\-m  <name>\fR
Override default module name with <name>
.TP
\fB\-make\fR
Generate a best-effort Makefile for compiling module
(\-make is also implied by \-L, \-l, and \-ldflags)
.TP
\fB\-mapnames <R> <S>\fR
Synonym for \-rename (deprecated)
.TP
\fB\-nocom\fR
Do not wrap common blocks
.TP
\fB\-noinit\fR
Do not generate an initialization fragment
.TP
\fB\-nopop\fR
Avoid explicit pop of func arguments, if possible
(also turns off generation of Usage: statements)
.TP
\fB\-noautotype\fR
Disable mapping of unknown types to opaque ptr types
.TP
\fB\-otree\fR
Print hierarchical listing of all opaque types
defined by the current invocation, then exit
.TP
\fB\-openmp\fR
Emit OpenMP #pragmas to parallelize vectorized code
(implies \-vec, i.e. turns on vectorization)
.TP
\fB\-print\fR
Print interface for code which would be generated,
but don't actually generate any code
.TP
\fB\-rc  <file>\fR
Load customizations from <file>, rather than from
first of ./slirprc or $SLIRPRC
.TP
\fB\-refscalars\fR
Support passing scalars as array/ref arguments
(default: on for Fortran bindings, off for C/C++)
.TP
\fB\-rename  <R> <S>\fR
Map C functions with prefixes matching the S-Lang
regexp R to S-Lang functions beginning with string S
(set S=NULL to map regexp prefix to empty string)
.TP
\fB\-sldb\fR
Run in interactive SLDB debugger (S\[hy]Lang 2 only)
.TP
\fB\-stdout\fR
Emit code to stdout, instead of files
.TP
\fB\-stubs\fR
Generate stub (empty) implementations for input
header files, allowing the module interface to be
exercised without linking in the underlying library
or any of its dependencies
.TP
\fB\-tmapout <file>\fR
Save a copy of the active typemap table to <file>
.TP
\fB\-tmapin  <file>\fR
evalfile() additional typemaps from <file>
.TP
\fB\-vec\fR
Attempt to vectorize every function within input interface
.TP
\fB\-\-version\fR
Output version information
.TP
\fB\-v\fR
Show verbose loading messages
.TP
\fB\-vh \-vhelp, \-\-vhelp\fR
Verbose help (normal \-\-help output, plus rarely used options)
.SH "AUTHOR"
.PP
The author of SLIRP is Michael S. Noble <mnoble@space.mit.edu>\&.
Rafael Laboissiere <rafael@debian.org> created the SLIRP package
for Debian.
.PP
Permission is granted to copy, distribute and/or modify
this document under the terms of the GNU General Public License,
Version 2 any later version published by the Free Software
Foundation.
.PP
On Debian systems, the complete text of the GNU General Public
License can be found in \fI/usr/share/common\-licenses/GPL\fR
.SH "SEE ALSO"
.PP
On Debian systems the reference manual for SLIRP can be found at
/usr/share/doc/slang\-slirp/manual.txt.gz.   It is also available
in PDF, HTML, and text forms on the SLIRP website.
